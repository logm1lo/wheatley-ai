/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: livekit_rtc.proto */

#ifndef PROTOBUF_C_livekit_5frtc_2eproto__INCLUDED
#define PROTOBUF_C_livekit_5frtc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "livekit_models.pb-c.h"

typedef struct Livekit__SignalRequest Livekit__SignalRequest;
typedef struct Livekit__SignalResponse Livekit__SignalResponse;
typedef struct Livekit__AddTrackRequest Livekit__AddTrackRequest;
typedef struct Livekit__TrickleRequest Livekit__TrickleRequest;
typedef struct Livekit__MuteTrackRequest Livekit__MuteTrackRequest;
typedef struct Livekit__JoinResponse Livekit__JoinResponse;
typedef struct Livekit__TrackPublishedResponse Livekit__TrackPublishedResponse;
typedef struct Livekit__SessionDescription Livekit__SessionDescription;
typedef struct Livekit__ParticipantUpdate Livekit__ParticipantUpdate;
typedef struct Livekit__UpdateSubscription Livekit__UpdateSubscription;
typedef struct Livekit__UpdateTrackSettings Livekit__UpdateTrackSettings;
typedef struct Livekit__LeaveRequest Livekit__LeaveRequest;
typedef struct Livekit__ICEServer Livekit__ICEServer;
typedef struct Livekit__SpeakersChanged Livekit__SpeakersChanged;
typedef struct Livekit__RoomUpdate Livekit__RoomUpdate;


/* --- enums --- */

typedef enum _Livekit__SignalTarget {
  LIVEKIT__SIGNAL_TARGET__PUBLISHER = 0,
  LIVEKIT__SIGNAL_TARGET__SUBSCRIBER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__SIGNAL_TARGET)
} Livekit__SignalTarget;
typedef enum _Livekit__VideoQuality {
  LIVEKIT__VIDEO_QUALITY__LOW = 0,
  LIVEKIT__VIDEO_QUALITY__MEDIUM = 1,
  LIVEKIT__VIDEO_QUALITY__HIGH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__VIDEO_QUALITY)
} Livekit__VideoQuality;

/* --- messages --- */

typedef enum {
  LIVEKIT__SIGNAL_REQUEST__MESSAGE__NOT_SET = 0,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_OFFER = 1,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_ANSWER = 2,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_TRICKLE = 3,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_ADD_TRACK = 4,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_MUTE = 5,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_SUBSCRIPTION = 6,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_TRACK_SETTING = 7,
  LIVEKIT__SIGNAL_REQUEST__MESSAGE_LEAVE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__SIGNAL_REQUEST__MESSAGE__CASE)
} Livekit__SignalRequest__MessageCase;

struct  Livekit__SignalRequest
{
  ProtobufCMessage base;
  Livekit__SignalRequest__MessageCase message_case;
  union {
    /*
     * initial join exchange, for publisher
     */
    Livekit__SessionDescription *offer;
    /*
     * participant answering publisher offer
     */
    Livekit__SessionDescription *answer;
    Livekit__TrickleRequest *trickle;
    Livekit__AddTrackRequest *add_track;
    /*
     * mute the participant's published tracks
     */
    Livekit__MuteTrackRequest *mute;
    /*
     * Subscribe or unsubscribe from tracks
     */
    Livekit__UpdateSubscription *subscription;
    /*
     * Update settings of subscribed tracks
     */
    Livekit__UpdateTrackSettings *track_setting;
    /*
     * Immediately terminate session
     */
    /*
     * Set active published layers, deprecated in favor of automatic tracking
     *    SetSimulcastLayers simulcast = 9;
     */
    Livekit__LeaveRequest *leave;
  };
};
#define LIVEKIT__SIGNAL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__signal_request__descriptor) \
    , LIVEKIT__SIGNAL_REQUEST__MESSAGE__NOT_SET, {0} }


typedef enum {
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE__NOT_SET = 0,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_JOIN = 1,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_ANSWER = 2,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_OFFER = 3,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_TRICKLE = 4,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_UPDATE = 5,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_TRACK_PUBLISHED = 6,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_LEAVE = 8,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_MUTE = 9,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_SPEAKERS_CHANGED = 10,
  LIVEKIT__SIGNAL_RESPONSE__MESSAGE_ROOM_UPDATE = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__SIGNAL_RESPONSE__MESSAGE__CASE)
} Livekit__SignalResponse__MessageCase;

struct  Livekit__SignalResponse
{
  ProtobufCMessage base;
  Livekit__SignalResponse__MessageCase message_case;
  union {
    /*
     * sent when join is accepted
     */
    Livekit__JoinResponse *join;
    /*
     * sent when server answers publisher
     */
    Livekit__SessionDescription *answer;
    /*
     * sent when server is sending subscriber an offer
     */
    Livekit__SessionDescription *offer;
    /*
     * sent when an ICE candidate is available
     */
    Livekit__TrickleRequest *trickle;
    /*
     * sent when participants in the room has changed
     */
    Livekit__ParticipantUpdate *update;
    /*
     * sent to the participant when their track has been published
     */
    Livekit__TrackPublishedResponse *track_published;
    /*
     * Immediately terminate session
     */
    Livekit__LeaveRequest *leave;
    /*
     * server initiated mute
     */
    Livekit__MuteTrackRequest *mute;
    /*
     * indicates changes to speaker status, including when they've gone to not speaking
     */
    Livekit__SpeakersChanged *speakers_changed;
    /*
     * sent when metadata of the room has changed
     */
    Livekit__RoomUpdate *room_update;
  };
};
#define LIVEKIT__SIGNAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__signal_response__descriptor) \
    , LIVEKIT__SIGNAL_RESPONSE__MESSAGE__NOT_SET, {0} }


struct  Livekit__AddTrackRequest
{
  ProtobufCMessage base;
  /*
   * client ID of track, to match it when RTC track is received
   */
  char *cid;
  char *name;
  Livekit__TrackType type;
  uint32_t width;
  uint32_t height;
  /*
   * true to add track and initialize to muted
   */
  protobuf_c_boolean muted;
  /*
   * true if DTX (Discontinuous Transmission) is disabled for audio
   */
  protobuf_c_boolean disable_dtx;
  Livekit__TrackSource source;
};
#define LIVEKIT__ADD_TRACK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__add_track_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, LIVEKIT__TRACK_TYPE__AUDIO, 0, 0, 0, 0, LIVEKIT__TRACK_SOURCE__UNKNOWN }


struct  Livekit__TrickleRequest
{
  ProtobufCMessage base;
  char *candidateinit;
  Livekit__SignalTarget target;
};
#define LIVEKIT__TRICKLE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__trickle_request__descriptor) \
    , (char *)protobuf_c_empty_string, LIVEKIT__SIGNAL_TARGET__PUBLISHER }


struct  Livekit__MuteTrackRequest
{
  ProtobufCMessage base;
  char *sid;
  protobuf_c_boolean muted;
};
#define LIVEKIT__MUTE_TRACK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__mute_track_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  Livekit__JoinResponse
{
  ProtobufCMessage base;
  Livekit__Room *room;
  Livekit__ParticipantInfo *participant;
  size_t n_other_participants;
  Livekit__ParticipantInfo **other_participants;
  char *server_version;
  size_t n_ice_servers;
  Livekit__ICEServer **ice_servers;
  /*
   * use subscriber as the primary PeerConnection
   */
  protobuf_c_boolean subscriber_primary;
  /*
   * when the current server isn't available, return alternate url to retry connection
   * when this is set, the other fields will be largely empty
   */
  char *alternative_url;
};
#define LIVEKIT__JOIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__join_response__descriptor) \
    , NULL, NULL, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, 0, (char *)protobuf_c_empty_string }


struct  Livekit__TrackPublishedResponse
{
  ProtobufCMessage base;
  char *cid;
  Livekit__TrackInfo *track;
};
#define LIVEKIT__TRACK_PUBLISHED_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__track_published_response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  Livekit__SessionDescription
{
  ProtobufCMessage base;
  /*
   * "answer" | "offer" | "pranswer" | "rollback"
   */
  char *type;
  char *sdp;
};
#define LIVEKIT__SESSION_DESCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__session_description__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Livekit__ParticipantUpdate
{
  ProtobufCMessage base;
  size_t n_participants;
  Livekit__ParticipantInfo **participants;
};
#define LIVEKIT__PARTICIPANT_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__participant_update__descriptor) \
    , 0,NULL }


struct  Livekit__UpdateSubscription
{
  ProtobufCMessage base;
  size_t n_track_sids;
  char **track_sids;
  protobuf_c_boolean subscribe;
};
#define LIVEKIT__UPDATE_SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__update_subscription__descriptor) \
    , 0,NULL, 0 }


struct  Livekit__UpdateTrackSettings
{
  ProtobufCMessage base;
  size_t n_track_sids;
  char **track_sids;
  /*
   * when true, the track is placed in a paused state, with no new data returned
   */
  protobuf_c_boolean disabled;
  /*
   * deprecated in favor of width & height
   */
  Livekit__VideoQuality quality;
  /*
   * for video, width to receive
   */
  uint32_t width;
  /*
   * for video, height to receive
   */
  uint32_t height;
};
#define LIVEKIT__UPDATE_TRACK_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__update_track_settings__descriptor) \
    , 0,NULL, 0, LIVEKIT__VIDEO_QUALITY__LOW, 0, 0 }


struct  Livekit__LeaveRequest
{
  ProtobufCMessage base;
  /*
   * sent when server initiates the disconnect due to server-restart
   * indicates clients should attempt full-reconnect sequence
   */
  protobuf_c_boolean can_reconnect;
};
#define LIVEKIT__LEAVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__leave_request__descriptor) \
    , 0 }


struct  Livekit__ICEServer
{
  ProtobufCMessage base;
  size_t n_urls;
  char **urls;
  char *username;
  char *credential;
};
#define LIVEKIT__ICESERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__iceserver__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Livekit__SpeakersChanged
{
  ProtobufCMessage base;
  size_t n_speakers;
  Livekit__SpeakerInfo **speakers;
};
#define LIVEKIT__SPEAKERS_CHANGED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__speakers_changed__descriptor) \
    , 0,NULL }


struct  Livekit__RoomUpdate
{
  ProtobufCMessage base;
  Livekit__Room *room;
};
#define LIVEKIT__ROOM_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__room_update__descriptor) \
    , NULL }


/* Livekit__SignalRequest methods */
void   livekit__signal_request__init
                     (Livekit__SignalRequest         *message);
size_t livekit__signal_request__get_packed_size
                     (const Livekit__SignalRequest   *message);
size_t livekit__signal_request__pack
                     (const Livekit__SignalRequest   *message,
                      uint8_t             *out);
size_t livekit__signal_request__pack_to_buffer
                     (const Livekit__SignalRequest   *message,
                      ProtobufCBuffer     *buffer);
Livekit__SignalRequest *
       livekit__signal_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__signal_request__free_unpacked
                     (Livekit__SignalRequest *message,
                      ProtobufCAllocator *allocator);
/* Livekit__SignalResponse methods */
void   livekit__signal_response__init
                     (Livekit__SignalResponse         *message);
size_t livekit__signal_response__get_packed_size
                     (const Livekit__SignalResponse   *message);
size_t livekit__signal_response__pack
                     (const Livekit__SignalResponse   *message,
                      uint8_t             *out);
size_t livekit__signal_response__pack_to_buffer
                     (const Livekit__SignalResponse   *message,
                      ProtobufCBuffer     *buffer);
Livekit__SignalResponse *
       livekit__signal_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__signal_response__free_unpacked
                     (Livekit__SignalResponse *message,
                      ProtobufCAllocator *allocator);
/* Livekit__AddTrackRequest methods */
void   livekit__add_track_request__init
                     (Livekit__AddTrackRequest         *message);
size_t livekit__add_track_request__get_packed_size
                     (const Livekit__AddTrackRequest   *message);
size_t livekit__add_track_request__pack
                     (const Livekit__AddTrackRequest   *message,
                      uint8_t             *out);
size_t livekit__add_track_request__pack_to_buffer
                     (const Livekit__AddTrackRequest   *message,
                      ProtobufCBuffer     *buffer);
Livekit__AddTrackRequest *
       livekit__add_track_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__add_track_request__free_unpacked
                     (Livekit__AddTrackRequest *message,
                      ProtobufCAllocator *allocator);
/* Livekit__TrickleRequest methods */
void   livekit__trickle_request__init
                     (Livekit__TrickleRequest         *message);
size_t livekit__trickle_request__get_packed_size
                     (const Livekit__TrickleRequest   *message);
size_t livekit__trickle_request__pack
                     (const Livekit__TrickleRequest   *message,
                      uint8_t             *out);
size_t livekit__trickle_request__pack_to_buffer
                     (const Livekit__TrickleRequest   *message,
                      ProtobufCBuffer     *buffer);
Livekit__TrickleRequest *
       livekit__trickle_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__trickle_request__free_unpacked
                     (Livekit__TrickleRequest *message,
                      ProtobufCAllocator *allocator);
/* Livekit__MuteTrackRequest methods */
void   livekit__mute_track_request__init
                     (Livekit__MuteTrackRequest         *message);
size_t livekit__mute_track_request__get_packed_size
                     (const Livekit__MuteTrackRequest   *message);
size_t livekit__mute_track_request__pack
                     (const Livekit__MuteTrackRequest   *message,
                      uint8_t             *out);
size_t livekit__mute_track_request__pack_to_buffer
                     (const Livekit__MuteTrackRequest   *message,
                      ProtobufCBuffer     *buffer);
Livekit__MuteTrackRequest *
       livekit__mute_track_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__mute_track_request__free_unpacked
                     (Livekit__MuteTrackRequest *message,
                      ProtobufCAllocator *allocator);
/* Livekit__JoinResponse methods */
void   livekit__join_response__init
                     (Livekit__JoinResponse         *message);
size_t livekit__join_response__get_packed_size
                     (const Livekit__JoinResponse   *message);
size_t livekit__join_response__pack
                     (const Livekit__JoinResponse   *message,
                      uint8_t             *out);
size_t livekit__join_response__pack_to_buffer
                     (const Livekit__JoinResponse   *message,
                      ProtobufCBuffer     *buffer);
Livekit__JoinResponse *
       livekit__join_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__join_response__free_unpacked
                     (Livekit__JoinResponse *message,
                      ProtobufCAllocator *allocator);
/* Livekit__TrackPublishedResponse methods */
void   livekit__track_published_response__init
                     (Livekit__TrackPublishedResponse         *message);
size_t livekit__track_published_response__get_packed_size
                     (const Livekit__TrackPublishedResponse   *message);
size_t livekit__track_published_response__pack
                     (const Livekit__TrackPublishedResponse   *message,
                      uint8_t             *out);
size_t livekit__track_published_response__pack_to_buffer
                     (const Livekit__TrackPublishedResponse   *message,
                      ProtobufCBuffer     *buffer);
Livekit__TrackPublishedResponse *
       livekit__track_published_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__track_published_response__free_unpacked
                     (Livekit__TrackPublishedResponse *message,
                      ProtobufCAllocator *allocator);
/* Livekit__SessionDescription methods */
void   livekit__session_description__init
                     (Livekit__SessionDescription         *message);
size_t livekit__session_description__get_packed_size
                     (const Livekit__SessionDescription   *message);
size_t livekit__session_description__pack
                     (const Livekit__SessionDescription   *message,
                      uint8_t             *out);
size_t livekit__session_description__pack_to_buffer
                     (const Livekit__SessionDescription   *message,
                      ProtobufCBuffer     *buffer);
Livekit__SessionDescription *
       livekit__session_description__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__session_description__free_unpacked
                     (Livekit__SessionDescription *message,
                      ProtobufCAllocator *allocator);
/* Livekit__ParticipantUpdate methods */
void   livekit__participant_update__init
                     (Livekit__ParticipantUpdate         *message);
size_t livekit__participant_update__get_packed_size
                     (const Livekit__ParticipantUpdate   *message);
size_t livekit__participant_update__pack
                     (const Livekit__ParticipantUpdate   *message,
                      uint8_t             *out);
size_t livekit__participant_update__pack_to_buffer
                     (const Livekit__ParticipantUpdate   *message,
                      ProtobufCBuffer     *buffer);
Livekit__ParticipantUpdate *
       livekit__participant_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__participant_update__free_unpacked
                     (Livekit__ParticipantUpdate *message,
                      ProtobufCAllocator *allocator);
/* Livekit__UpdateSubscription methods */
void   livekit__update_subscription__init
                     (Livekit__UpdateSubscription         *message);
size_t livekit__update_subscription__get_packed_size
                     (const Livekit__UpdateSubscription   *message);
size_t livekit__update_subscription__pack
                     (const Livekit__UpdateSubscription   *message,
                      uint8_t             *out);
size_t livekit__update_subscription__pack_to_buffer
                     (const Livekit__UpdateSubscription   *message,
                      ProtobufCBuffer     *buffer);
Livekit__UpdateSubscription *
       livekit__update_subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__update_subscription__free_unpacked
                     (Livekit__UpdateSubscription *message,
                      ProtobufCAllocator *allocator);
/* Livekit__UpdateTrackSettings methods */
void   livekit__update_track_settings__init
                     (Livekit__UpdateTrackSettings         *message);
size_t livekit__update_track_settings__get_packed_size
                     (const Livekit__UpdateTrackSettings   *message);
size_t livekit__update_track_settings__pack
                     (const Livekit__UpdateTrackSettings   *message,
                      uint8_t             *out);
size_t livekit__update_track_settings__pack_to_buffer
                     (const Livekit__UpdateTrackSettings   *message,
                      ProtobufCBuffer     *buffer);
Livekit__UpdateTrackSettings *
       livekit__update_track_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__update_track_settings__free_unpacked
                     (Livekit__UpdateTrackSettings *message,
                      ProtobufCAllocator *allocator);
/* Livekit__LeaveRequest methods */
void   livekit__leave_request__init
                     (Livekit__LeaveRequest         *message);
size_t livekit__leave_request__get_packed_size
                     (const Livekit__LeaveRequest   *message);
size_t livekit__leave_request__pack
                     (const Livekit__LeaveRequest   *message,
                      uint8_t             *out);
size_t livekit__leave_request__pack_to_buffer
                     (const Livekit__LeaveRequest   *message,
                      ProtobufCBuffer     *buffer);
Livekit__LeaveRequest *
       livekit__leave_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__leave_request__free_unpacked
                     (Livekit__LeaveRequest *message,
                      ProtobufCAllocator *allocator);
/* Livekit__ICEServer methods */
void   livekit__iceserver__init
                     (Livekit__ICEServer         *message);
size_t livekit__iceserver__get_packed_size
                     (const Livekit__ICEServer   *message);
size_t livekit__iceserver__pack
                     (const Livekit__ICEServer   *message,
                      uint8_t             *out);
size_t livekit__iceserver__pack_to_buffer
                     (const Livekit__ICEServer   *message,
                      ProtobufCBuffer     *buffer);
Livekit__ICEServer *
       livekit__iceserver__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__iceserver__free_unpacked
                     (Livekit__ICEServer *message,
                      ProtobufCAllocator *allocator);
/* Livekit__SpeakersChanged methods */
void   livekit__speakers_changed__init
                     (Livekit__SpeakersChanged         *message);
size_t livekit__speakers_changed__get_packed_size
                     (const Livekit__SpeakersChanged   *message);
size_t livekit__speakers_changed__pack
                     (const Livekit__SpeakersChanged   *message,
                      uint8_t             *out);
size_t livekit__speakers_changed__pack_to_buffer
                     (const Livekit__SpeakersChanged   *message,
                      ProtobufCBuffer     *buffer);
Livekit__SpeakersChanged *
       livekit__speakers_changed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__speakers_changed__free_unpacked
                     (Livekit__SpeakersChanged *message,
                      ProtobufCAllocator *allocator);
/* Livekit__RoomUpdate methods */
void   livekit__room_update__init
                     (Livekit__RoomUpdate         *message);
size_t livekit__room_update__get_packed_size
                     (const Livekit__RoomUpdate   *message);
size_t livekit__room_update__pack
                     (const Livekit__RoomUpdate   *message,
                      uint8_t             *out);
size_t livekit__room_update__pack_to_buffer
                     (const Livekit__RoomUpdate   *message,
                      ProtobufCBuffer     *buffer);
Livekit__RoomUpdate *
       livekit__room_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__room_update__free_unpacked
                     (Livekit__RoomUpdate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Livekit__SignalRequest_Closure)
                 (const Livekit__SignalRequest *message,
                  void *closure_data);
typedef void (*Livekit__SignalResponse_Closure)
                 (const Livekit__SignalResponse *message,
                  void *closure_data);
typedef void (*Livekit__AddTrackRequest_Closure)
                 (const Livekit__AddTrackRequest *message,
                  void *closure_data);
typedef void (*Livekit__TrickleRequest_Closure)
                 (const Livekit__TrickleRequest *message,
                  void *closure_data);
typedef void (*Livekit__MuteTrackRequest_Closure)
                 (const Livekit__MuteTrackRequest *message,
                  void *closure_data);
typedef void (*Livekit__JoinResponse_Closure)
                 (const Livekit__JoinResponse *message,
                  void *closure_data);
typedef void (*Livekit__TrackPublishedResponse_Closure)
                 (const Livekit__TrackPublishedResponse *message,
                  void *closure_data);
typedef void (*Livekit__SessionDescription_Closure)
                 (const Livekit__SessionDescription *message,
                  void *closure_data);
typedef void (*Livekit__ParticipantUpdate_Closure)
                 (const Livekit__ParticipantUpdate *message,
                  void *closure_data);
typedef void (*Livekit__UpdateSubscription_Closure)
                 (const Livekit__UpdateSubscription *message,
                  void *closure_data);
typedef void (*Livekit__UpdateTrackSettings_Closure)
                 (const Livekit__UpdateTrackSettings *message,
                  void *closure_data);
typedef void (*Livekit__LeaveRequest_Closure)
                 (const Livekit__LeaveRequest *message,
                  void *closure_data);
typedef void (*Livekit__ICEServer_Closure)
                 (const Livekit__ICEServer *message,
                  void *closure_data);
typedef void (*Livekit__SpeakersChanged_Closure)
                 (const Livekit__SpeakersChanged *message,
                  void *closure_data);
typedef void (*Livekit__RoomUpdate_Closure)
                 (const Livekit__RoomUpdate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    livekit__signal_target__descriptor;
extern const ProtobufCEnumDescriptor    livekit__video_quality__descriptor;
extern const ProtobufCMessageDescriptor livekit__signal_request__descriptor;
extern const ProtobufCMessageDescriptor livekit__signal_response__descriptor;
extern const ProtobufCMessageDescriptor livekit__add_track_request__descriptor;
extern const ProtobufCMessageDescriptor livekit__trickle_request__descriptor;
extern const ProtobufCMessageDescriptor livekit__mute_track_request__descriptor;
extern const ProtobufCMessageDescriptor livekit__join_response__descriptor;
extern const ProtobufCMessageDescriptor livekit__track_published_response__descriptor;
extern const ProtobufCMessageDescriptor livekit__session_description__descriptor;
extern const ProtobufCMessageDescriptor livekit__participant_update__descriptor;
extern const ProtobufCMessageDescriptor livekit__update_subscription__descriptor;
extern const ProtobufCMessageDescriptor livekit__update_track_settings__descriptor;
extern const ProtobufCMessageDescriptor livekit__leave_request__descriptor;
extern const ProtobufCMessageDescriptor livekit__iceserver__descriptor;
extern const ProtobufCMessageDescriptor livekit__speakers_changed__descriptor;
extern const ProtobufCMessageDescriptor livekit__room_update__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_livekit_5frtc_2eproto__INCLUDED */
