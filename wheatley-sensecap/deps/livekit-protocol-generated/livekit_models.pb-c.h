/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: livekit_models.proto */

#ifndef PROTOBUF_C_livekit_5fmodels_2eproto__INCLUDED
#define PROTOBUF_C_livekit_5fmodels_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Livekit__Room Livekit__Room;
typedef struct Livekit__Codec Livekit__Codec;
typedef struct Livekit__ParticipantInfo Livekit__ParticipantInfo;
typedef struct Livekit__TrackInfo Livekit__TrackInfo;
typedef struct Livekit__DataPacket Livekit__DataPacket;
typedef struct Livekit__ActiveSpeakerUpdate Livekit__ActiveSpeakerUpdate;
typedef struct Livekit__SpeakerInfo Livekit__SpeakerInfo;
typedef struct Livekit__UserPacket Livekit__UserPacket;


/* --- enums --- */

typedef enum _Livekit__ParticipantInfo__State {
  /*
   * websocket' connected, but not offered yet
   */
  LIVEKIT__PARTICIPANT_INFO__STATE__JOINING = 0,
  /*
   * server received client offer
   */
  LIVEKIT__PARTICIPANT_INFO__STATE__JOINED = 1,
  /*
   * ICE connectivity established
   */
  LIVEKIT__PARTICIPANT_INFO__STATE__ACTIVE = 2,
  /*
   * WS disconnected
   */
  LIVEKIT__PARTICIPANT_INFO__STATE__DISCONNECTED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__PARTICIPANT_INFO__STATE)
} Livekit__ParticipantInfo__State;
typedef enum _Livekit__DataPacket__Kind {
  LIVEKIT__DATA_PACKET__KIND__RELIABLE = 0,
  LIVEKIT__DATA_PACKET__KIND__LOSSY = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__DATA_PACKET__KIND)
} Livekit__DataPacket__Kind;
typedef enum _Livekit__TrackType {
  LIVEKIT__TRACK_TYPE__AUDIO = 0,
  LIVEKIT__TRACK_TYPE__VIDEO = 1,
  LIVEKIT__TRACK_TYPE__DATA = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__TRACK_TYPE)
} Livekit__TrackType;
typedef enum _Livekit__TrackSource {
  LIVEKIT__TRACK_SOURCE__UNKNOWN = 0,
  LIVEKIT__TRACK_SOURCE__CAMERA = 1,
  LIVEKIT__TRACK_SOURCE__MICROPHONE = 2,
  LIVEKIT__TRACK_SOURCE__SCREEN_SHARE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__TRACK_SOURCE)
} Livekit__TrackSource;

/* --- messages --- */

struct  Livekit__Room
{
  ProtobufCMessage base;
  char *sid;
  char *name;
  uint32_t empty_timeout;
  uint32_t max_participants;
  int64_t creation_time;
  char *turn_password;
  size_t n_enabled_codecs;
  Livekit__Codec **enabled_codecs;
  char *metadata;
  uint32_t num_participants;
};
#define LIVEKIT__ROOM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__room__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0 }


struct  Livekit__Codec
{
  ProtobufCMessage base;
  char *mime;
  char *fmtp_line;
};
#define LIVEKIT__CODEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__codec__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Livekit__ParticipantInfo
{
  ProtobufCMessage base;
  char *sid;
  char *identity;
  Livekit__ParticipantInfo__State state;
  size_t n_tracks;
  Livekit__TrackInfo **tracks;
  char *metadata;
  /*
   * timestamp when participant joined room, in seconds
   */
  int64_t joined_at;
  /*
   * hidden participant (used for recording)
   */
  protobuf_c_boolean hidden;
};
#define LIVEKIT__PARTICIPANT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__participant_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, LIVEKIT__PARTICIPANT_INFO__STATE__JOINING, 0,NULL, (char *)protobuf_c_empty_string, 0, 0 }


struct  Livekit__TrackInfo
{
  ProtobufCMessage base;
  char *sid;
  Livekit__TrackType type;
  char *name;
  protobuf_c_boolean muted;
  /*
   * original width of video (unset for audio)
   * clients may receive a lower resolution version with simulcast
   */
  uint32_t width;
  /*
   * original height of video (unset for audio)
   */
  uint32_t height;
  /*
   * true if track is simulcasted
   */
  protobuf_c_boolean simulcast;
  /*
   * true if DTX (Discontinuous Transmission) is disabled for audio
   */
  protobuf_c_boolean disable_dtx;
  /*
   * source of media
   */
  Livekit__TrackSource source;
};
#define LIVEKIT__TRACK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__track_info__descriptor) \
    , (char *)protobuf_c_empty_string, LIVEKIT__TRACK_TYPE__AUDIO, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, LIVEKIT__TRACK_SOURCE__UNKNOWN }


typedef enum {
  LIVEKIT__DATA_PACKET__VALUE__NOT_SET = 0,
  LIVEKIT__DATA_PACKET__VALUE_USER = 2,
  LIVEKIT__DATA_PACKET__VALUE_SPEAKER = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEKIT__DATA_PACKET__VALUE__CASE)
} Livekit__DataPacket__ValueCase;

/*
 * new DataPacket API
 */
struct  Livekit__DataPacket
{
  ProtobufCMessage base;
  Livekit__DataPacket__Kind kind;
  Livekit__DataPacket__ValueCase value_case;
  union {
    Livekit__UserPacket *user;
    Livekit__ActiveSpeakerUpdate *speaker;
  };
};
#define LIVEKIT__DATA_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__data_packet__descriptor) \
    , LIVEKIT__DATA_PACKET__KIND__RELIABLE, LIVEKIT__DATA_PACKET__VALUE__NOT_SET, {0} }


struct  Livekit__ActiveSpeakerUpdate
{
  ProtobufCMessage base;
  size_t n_speakers;
  Livekit__SpeakerInfo **speakers;
};
#define LIVEKIT__ACTIVE_SPEAKER_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__active_speaker_update__descriptor) \
    , 0,NULL }


struct  Livekit__SpeakerInfo
{
  ProtobufCMessage base;
  char *sid;
  /*
   * audio level, 0-1.0, 1 is loudest
   */
  float level;
  /*
   * true if speaker is currently active
   */
  protobuf_c_boolean active;
};
#define LIVEKIT__SPEAKER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__speaker_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  Livekit__UserPacket
{
  ProtobufCMessage base;
  /*
   * participant ID of user that sent the message
   */
  char *participant_sid;
  /*
   * user defined payload
   */
  ProtobufCBinaryData payload;
  /*
   * the ID of the participants who will receive the message (the message will be sent to all the people in the room if this variable is empty)
   */
  size_t n_destination_sids;
  char **destination_sids;
};
#define LIVEKIT__USER_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livekit__user_packet__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, 0,NULL }


/* Livekit__Room methods */
void   livekit__room__init
                     (Livekit__Room         *message);
size_t livekit__room__get_packed_size
                     (const Livekit__Room   *message);
size_t livekit__room__pack
                     (const Livekit__Room   *message,
                      uint8_t             *out);
size_t livekit__room__pack_to_buffer
                     (const Livekit__Room   *message,
                      ProtobufCBuffer     *buffer);
Livekit__Room *
       livekit__room__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__room__free_unpacked
                     (Livekit__Room *message,
                      ProtobufCAllocator *allocator);
/* Livekit__Codec methods */
void   livekit__codec__init
                     (Livekit__Codec         *message);
size_t livekit__codec__get_packed_size
                     (const Livekit__Codec   *message);
size_t livekit__codec__pack
                     (const Livekit__Codec   *message,
                      uint8_t             *out);
size_t livekit__codec__pack_to_buffer
                     (const Livekit__Codec   *message,
                      ProtobufCBuffer     *buffer);
Livekit__Codec *
       livekit__codec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__codec__free_unpacked
                     (Livekit__Codec *message,
                      ProtobufCAllocator *allocator);
/* Livekit__ParticipantInfo methods */
void   livekit__participant_info__init
                     (Livekit__ParticipantInfo         *message);
size_t livekit__participant_info__get_packed_size
                     (const Livekit__ParticipantInfo   *message);
size_t livekit__participant_info__pack
                     (const Livekit__ParticipantInfo   *message,
                      uint8_t             *out);
size_t livekit__participant_info__pack_to_buffer
                     (const Livekit__ParticipantInfo   *message,
                      ProtobufCBuffer     *buffer);
Livekit__ParticipantInfo *
       livekit__participant_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__participant_info__free_unpacked
                     (Livekit__ParticipantInfo *message,
                      ProtobufCAllocator *allocator);
/* Livekit__TrackInfo methods */
void   livekit__track_info__init
                     (Livekit__TrackInfo         *message);
size_t livekit__track_info__get_packed_size
                     (const Livekit__TrackInfo   *message);
size_t livekit__track_info__pack
                     (const Livekit__TrackInfo   *message,
                      uint8_t             *out);
size_t livekit__track_info__pack_to_buffer
                     (const Livekit__TrackInfo   *message,
                      ProtobufCBuffer     *buffer);
Livekit__TrackInfo *
       livekit__track_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__track_info__free_unpacked
                     (Livekit__TrackInfo *message,
                      ProtobufCAllocator *allocator);
/* Livekit__DataPacket methods */
void   livekit__data_packet__init
                     (Livekit__DataPacket         *message);
size_t livekit__data_packet__get_packed_size
                     (const Livekit__DataPacket   *message);
size_t livekit__data_packet__pack
                     (const Livekit__DataPacket   *message,
                      uint8_t             *out);
size_t livekit__data_packet__pack_to_buffer
                     (const Livekit__DataPacket   *message,
                      ProtobufCBuffer     *buffer);
Livekit__DataPacket *
       livekit__data_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__data_packet__free_unpacked
                     (Livekit__DataPacket *message,
                      ProtobufCAllocator *allocator);
/* Livekit__ActiveSpeakerUpdate methods */
void   livekit__active_speaker_update__init
                     (Livekit__ActiveSpeakerUpdate         *message);
size_t livekit__active_speaker_update__get_packed_size
                     (const Livekit__ActiveSpeakerUpdate   *message);
size_t livekit__active_speaker_update__pack
                     (const Livekit__ActiveSpeakerUpdate   *message,
                      uint8_t             *out);
size_t livekit__active_speaker_update__pack_to_buffer
                     (const Livekit__ActiveSpeakerUpdate   *message,
                      ProtobufCBuffer     *buffer);
Livekit__ActiveSpeakerUpdate *
       livekit__active_speaker_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__active_speaker_update__free_unpacked
                     (Livekit__ActiveSpeakerUpdate *message,
                      ProtobufCAllocator *allocator);
/* Livekit__SpeakerInfo methods */
void   livekit__speaker_info__init
                     (Livekit__SpeakerInfo         *message);
size_t livekit__speaker_info__get_packed_size
                     (const Livekit__SpeakerInfo   *message);
size_t livekit__speaker_info__pack
                     (const Livekit__SpeakerInfo   *message,
                      uint8_t             *out);
size_t livekit__speaker_info__pack_to_buffer
                     (const Livekit__SpeakerInfo   *message,
                      ProtobufCBuffer     *buffer);
Livekit__SpeakerInfo *
       livekit__speaker_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__speaker_info__free_unpacked
                     (Livekit__SpeakerInfo *message,
                      ProtobufCAllocator *allocator);
/* Livekit__UserPacket methods */
void   livekit__user_packet__init
                     (Livekit__UserPacket         *message);
size_t livekit__user_packet__get_packed_size
                     (const Livekit__UserPacket   *message);
size_t livekit__user_packet__pack
                     (const Livekit__UserPacket   *message,
                      uint8_t             *out);
size_t livekit__user_packet__pack_to_buffer
                     (const Livekit__UserPacket   *message,
                      ProtobufCBuffer     *buffer);
Livekit__UserPacket *
       livekit__user_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livekit__user_packet__free_unpacked
                     (Livekit__UserPacket *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Livekit__Room_Closure)
                 (const Livekit__Room *message,
                  void *closure_data);
typedef void (*Livekit__Codec_Closure)
                 (const Livekit__Codec *message,
                  void *closure_data);
typedef void (*Livekit__ParticipantInfo_Closure)
                 (const Livekit__ParticipantInfo *message,
                  void *closure_data);
typedef void (*Livekit__TrackInfo_Closure)
                 (const Livekit__TrackInfo *message,
                  void *closure_data);
typedef void (*Livekit__DataPacket_Closure)
                 (const Livekit__DataPacket *message,
                  void *closure_data);
typedef void (*Livekit__ActiveSpeakerUpdate_Closure)
                 (const Livekit__ActiveSpeakerUpdate *message,
                  void *closure_data);
typedef void (*Livekit__SpeakerInfo_Closure)
                 (const Livekit__SpeakerInfo *message,
                  void *closure_data);
typedef void (*Livekit__UserPacket_Closure)
                 (const Livekit__UserPacket *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    livekit__track_type__descriptor;
extern const ProtobufCEnumDescriptor    livekit__track_source__descriptor;
extern const ProtobufCMessageDescriptor livekit__room__descriptor;
extern const ProtobufCMessageDescriptor livekit__codec__descriptor;
extern const ProtobufCMessageDescriptor livekit__participant_info__descriptor;
extern const ProtobufCEnumDescriptor    livekit__participant_info__state__descriptor;
extern const ProtobufCMessageDescriptor livekit__track_info__descriptor;
extern const ProtobufCMessageDescriptor livekit__data_packet__descriptor;
extern const ProtobufCEnumDescriptor    livekit__data_packet__kind__descriptor;
extern const ProtobufCMessageDescriptor livekit__active_speaker_update__descriptor;
extern const ProtobufCMessageDescriptor livekit__speaker_info__descriptor;
extern const ProtobufCMessageDescriptor livekit__user_packet__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_livekit_5fmodels_2eproto__INCLUDED */
